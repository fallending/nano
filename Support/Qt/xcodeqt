#!/usr/bin/ruby -w
#============================================================================
#	NAME:
#		xcodeqt
#
#	DESCRIPTION:
#		Xcode Qt tool.
#
#		Automatically creates a .moc file from .h files, and compiles Qt
#		source files (.moc, .qrc, .ui) into .cpp.
#
#		To use, make two additions to an Xcode project:
#
#		1.	Create a "Qt" target.
#
#			This target must be set as a dependent of the main target, and
#			contain a Run Script phase which performs:
#
#				xcodeqt --moc --in="$(PROJECT_DIR)/../Source"
#							  --out="$(PROJECT_DIR)/../Source/QtGlue.moc"
#
#			The --in controls the directory to scan for .h files, and the
#			output file must be a .moc file.
#
#		2.	Create a Build Rule in the main target.
#
#			This rule should match files with:
#
#				*.[mqu][ori]*
#
#			Unfortunately Xcode does not support alternation within globbing,
#			however this will match .moc/.qrc/.ui.
#
#			This rule should process files with:
#
#				xcodeqt --build --in="${INPUT_FILE_PATH}"
#								--out="${DERIVED_FILES_DIR}/${INPUT_FILE_BASE}.cpp"
#
#			The output for the rule should match the --out parameter, so that
#			Xcode's dependency tracking will invoke xcodeqt whenever the .cpp
#			file is out of date.
#
#		The Qt target will invoke xcodeqt to update the .moc file before Xcode
#		performs dependency checking for the main target. This must be done from
#		a separate target, since Run Script phases are invoked after dependency
#		checking.
#
#		The build rule will then invoke xcodeqt for any .moc, .qrc, and .ui
#		files to create derived source files from their contents.
#
#	COPYRIGHT:
#		Copyright (c) 2009, refNum Software
#		<http://www.refnum.com/>
#
#		All rights reserved.
#============================================================================
#		Imports
#----------------------------------------------------------------------------
require 'digest/md5'
require 'getoptlong';





#============================================================================
#		Constants
#----------------------------------------------------------------------------
# Qt
if (RUBY_PLATFORM =~ /darwin/)
	$moc = "/Developer/Tools/Qt/moc";
	$uic = "/Developer/Tools/Qt/uic";
	$rcc = "/Developer/Tools/Qt/rcc";
	$QT_DEFINES = "-DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -D__APPLE__ -D__GNUC__";
	$QT_INCPATH = "-I/Library/Frameworks/QtCore.framework/Headers -I/Library/Frameworks/QtGui.framework/Headers -I/System/Library/Frameworks/CarbonCore.framework/Headers -I/usr/include -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/local/include -I/usr/local/Qt4.5/mkspecs/macx-xcode";
else
	raise("Unsupported platform");
end


# Fragments
$kMocHeader = <<FRAGMENT_MOC
# Autogenerated by xcodeqt
#
# WARNING - All changes to this file will be lost!
# ------------------------------------------------
FRAGMENT_MOC





#============================================================================
#		buildMoc : Build a .moc file.
#----------------------------------------------------------------------------
def buildMoc(pathIn, pathOut)

	# Get the state we need
	pathRoot = File.dirname(pathIn);
	mocFile  = IO.read(     pathIn);



	# Compile the files
	`rm -f "#{pathOut}"`

	mocFile.split("\n").each do |theFile|
	
		if (theFile !~ /^#/):
			theFile  = pathRoot + "/" + theFile;
			`#{$moc} #{$QT_DEFINES} #{$QT_INCPATH} -nw #{theFile} >> #{pathOut}`;
		end
		
	end

end





#============================================================================
#		buildQrc : Build a .qrc file.
#----------------------------------------------------------------------------
def buildQrc(pathIn, pathOut)

	# Get the state we need
	theName = File.basename(pathIn, ".qrc");



	# Compile the file
	print `#{$rcc} -name #{theName} #{pathIn} -o #{pathOut}`;

end





#============================================================================
#		buildUI : Build a .ui file.
#----------------------------------------------------------------------------
def buildUI(pathIn, pathOut)

	# Get the state we need
	pathHdr = pathOut.sub(/\.cpp$/, ".h");


	# Compile the file
	print `#{$uic} #{pathIn} -o #{pathHdr}`;
	print `#{$moc} #{$QT_DEFINES} #{$QT_INCPATH} -nw #{pathIn} -o #{pathOut}`;

end





#============================================================================
#		doMoc : Perform a moc command.
#----------------------------------------------------------------------------
def doMoc(pathIn, pathOut)

	# Check our parameters
	doHelp() if (pathIn == nil || pathOut == nil);



	# Find the mocable files
	#
	# All paths are relative to the moc file, to locate them for processing.
	pathRoot = File.dirname(pathOut);
	mocFile  = `cd "#{pathRoot}"; find . -name "*.h" -exec grep -l Q_OBJECT "{}" \\; | sort`;
	mocFile  = $kMocHeader + mocFile;



	# Decide if we need to rebuild
	#
	# We need to rebuild if the moc file doesn't exist, a header has
	# been touched, or a header has been added/removed from the list.
	buildMoc = !File.exists?(pathOut);

	if (!buildMoc):
		mocTime = File.mtime(pathOut);

		mocFile.split("\n").each do |theFile|

			if (theFile !~ /^#/):
				theFile  = pathRoot + "/" + theFile;
				buildMoc = (File.mtime(theFile) > mocTime);

				break if (buildMoc);
			end

		end

	end

	if (!buildMoc):
		oldMD5   = Digest::MD5.hexdigest(IO.read(pathOut));
		newMD5   = Digest::MD5.hexdigest(mocFile);
		buildMoc = (oldMD5 != newMD5);
	end



	# Update the moc file
	if (buildMoc):
		File.open(pathOut, 'w') {|theFile| theFile.write(mocFile) };
	end

end





#============================================================================
#		doBuild : Perform a build command.
#----------------------------------------------------------------------------
def doBuild(pathIn, pathOut)

	# Check our parameters
	doHelp() if (pathIn == nil || pathOut == nil);



	# Build the file
	if (pathIn =~ /\.moc$/):
		buildMoc(pathIn, pathOut);

	elsif (pathIn =~ /\.qrc$/):
		buildQrc(pathIn, pathOut);

	elsif (pathIn =~ /\.ui$/):
		buildUI(pathIn, pathOut);

	else
		doHelp();
	end;

end





#============================================================================
#		doHelp : Display some help.
#----------------------------------------------------------------------------
def doHelp

	# Print some help
	puts("xcodeqt --moc --in=path --out=file.moc");
	puts("        Scan path for .h files that contain Q_OBJECT references");
	puts("        and generate a list of mocable files in file.moc");
	puts("");
	puts("xcodeqt --build --in=file.[moc|qrc|ui] --out=file.cpp");
	puts("        Build a .moc, .qrc, or .ui file into a .cpp file");
	puts("");
	exit(0);

end





#============================================================================
#		xcodeqt : Xcode Qt tool.
#----------------------------------------------------------------------------
def xcodeqt

	# Get the arguments
	theCmd  = nil;
	pathIn  = nil;
	pathOut = nil;
	
	args = GetoptLong.new(	[ '--moc',   GetoptLong::NO_ARGUMENT       ],
							[ '--build', GetoptLong::NO_ARGUMENT       ],
							[ '--in',    GetoptLong::REQUIRED_ARGUMENT ],
							[ '--out',   GetoptLong::REQUIRED_ARGUMENT ]
							);

	args.each do |theArg, theValue|
		if (theArg == "--moc"):
			theCmd = "moc";

		elsif (theArg == "--build"):
			theCmd = "build";
		
		elsif (theArg == "--in"):
			pathIn = theValue;

		elsif (theArg == "--out"):
			pathOut = theValue;
		end
    end



	# Normalise pahs
	pathIn  = File.expand_path(pathIn)  if (pathIn  != nil);
	pathOut = File.expand_path(pathOut) if (pathOut != nil);



	# Perform the command
	if (theCmd == "moc"):
		doMoc(pathIn, pathOut);

	elsif (theCmd == "build"):
		doBuild(pathIn, pathOut);

	else
		doHelp();
	end

end





#============================================================================
#		xcodeqt : Xcode Qt tool.
#----------------------------------------------------------------------------
xcodeqt();

